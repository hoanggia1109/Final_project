// eslint-disable-next-line @typescript-eslint/no-require-imports
const express = require("express");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const bcrypt = require("bcryptjs");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const jwt = require("jsonwebtoken");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const { UserModel } = require("../database");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const nodemailer = require("nodemailer");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const { v4: uuidv4 } = require("uuid");

const router = express.Router();

/* -------- ƒêƒÉng k√Ω -------- */
router.post("/dangky", async (req, res) => {
  console.log("üîµ Nh·∫≠n request ƒëƒÉng k√Ω:", req.body);
  
  try {
    const { email, password, fullName, phone } = req.body;
    
    // Validation
    if (!email || !password) {
      return res.status(400).json({ message: "Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc" });
    }

    if (password.length < 6) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" });
    }
    
    console.log("üîç Checking email:", email);
    
    const existed = await UserModel.findOne({ where: { email } });
    
    if (existed) {
      console.log("‚ùå Email ƒë√£ t·ªìn t·∫°i");
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    console.log("üîê Hashing password...");
    const hashed = await bcrypt.hash(password, 10);
    
    console.log("üíæ Creating user...");
    const newUser = await UserModel.create({ 
      id: uuidv4(), 
      email, 
      password: hashed,
      ho_ten: fullName || null,
      sdt: phone || null
    });
    
    console.log("‚úÖ User created:", newUser.id);
    
    res.json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });
  } catch (err) {
    console.error("üî• ERROR:", err.message);
    res.status(500).json({ message: err.message });
  }
});

/* -------- ƒêƒÉng nh·∫≠p -------- */
router.post("/dangnhap", async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await UserModel.findOne({ where: { email } });
    if (!user) return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });

    const ok = await bcrypt.compare(password, user.password);
    if (!ok) return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u" });

    const token = jwt.sign({ id: user.id, email, role: user.role }, "SECRET_KEY", { expiresIn: "7d" });
    
    // Tr·∫£ v·ªÅ th√¥ng tin user ƒë·∫ßy ƒë·ªß
    res.json({ 
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", 
      token,
      user: {
        id: user.id,
        email: user.email,
        fullName: user.ho_ten || email.split('@')[0], // D√πng email n·∫øu kh√¥ng c√≥ t√™n
        role: user.role || 'customer'
      }
    });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

/* -------- Qu√™n m·∫≠t kh·∫©u -------- */
router.post("/quenpass", async (req, res) => {
  try {
    const { email } = req.body;
    const user = await UserModel.findOne({ where: { email } });
    if (!user) return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });

    const newPass = Math.random().toString(36).slice(-8);
    const hashed = await bcrypt.hash(newPass, 10);
    await user.update({ password: hashed });

    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "tnpv2709@gmail.com",
        pass: "anvb vlod twoq xvvy",
      },
    });

    await transporter.sendMail({
      from: "Shop N·ªôi Th·∫•t <tnpv2709@gmail.com>",
      to: email,
      subject: "Kh√¥i ph·ª•c m·∫≠t kh·∫©u",
      html: `<p>M·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n l√†: <b>${newPass}</b></p>`,
    });

    res.json({ message: "ƒê√£ g·ª≠i m·∫≠t kh·∫©u m·ªõi qua email" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói g·ª≠i email", error: err.message });
  }
});

/* -------- ƒê·ªïi m·∫≠t kh·∫©u -------- */
router.post("/doipass", async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader)
      return res.status(401).json({ message: "Thi·∫øu header Authorization" });

    const token = authHeader.split(" ")[1]; // l·∫•y ph·∫ßn sau "Bearer"
    if (!token)
      return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá" });

    const decoded = jwt.verify(token, "SECRET_KEY");

    const { pass_old, pass_new1, pass_new2 } = req.body;
    if (pass_new1 !== pass_new2)
      return res.status(400).json({ message: "M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp" });

    const user = await UserModel.findByPk(decoded.id);
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });

    const match = await bcrypt.compare(pass_old, user.password);
    if (!match) return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u c≈©" });

    const hashed = await bcrypt.hash(pass_new1, 10);
    await user.update({ password: hashed });

    res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

module.exports = router;